{"version":3,"sources":["components/navbar/Navbar.jsx","hooks/useMarketContract.js","hooks/useContract.js","components/nfts/Nfts.jsx","pages/home/Home.jsx","pages/profile/Profile.jsx","pages/item/Item.jsx","pages/create/Create.jsx","pages/itemRelist/itemRelist.jsx","App.js","index.js"],"names":["Navbar","useState","useContractKit","address","destroy","connect","className","to","type","onClick","useMarketContract","abi","contractAddress","getConnectedKit","contract","setContract","getContract","useCallback","a","kit","web3","eth","Contract","useEffect","useContract","MyNftMarketAbi","MyNFTContractAddress","NFTMarketplace","Nfts","title","nfts","loading","relist","console","log","length","color","size","map","nft","tokenId","src","image","alt","name","price","Home","marketplace","performActions","setNfts","setLoading","loadNFTs","methods","fetchMarketItems","call","data","Promise","all","i","tokenURI","tokenUri","axios","get","meta","ethers","utils","formatUnits","toString","Number","seller","owner","items","e","Profile","fetchMyNFTs","getNftOwner","Item","id","useParams","nftData","setNftData","navigate","useNavigate","fetchNft","purchaseNft","defaultAccount","parseUnits","createMarketSale","send","from","value","alert","error","description","autoComplete","onSubmit","preventDefault","client","ipfsHttpClient","Create","setImage","setPrice","category","setCategory","setName","setDescription","uploadToIPFS","event","file","target","files","add","result","path","createNFT","JSON","stringify","mintThenList","uri","listingPrice","parseEther","createToken","onChange","placeholder","autoFocus","rows","disabled","ItemRelist","listNFTForSale","priceFormatted","resellToken","App","element","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","url","document","getElementById"],"mappings":"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","file":"static/js/main.14a8e3f3.chunk.js","sourcesContent":["import React,{ useState} from 'react'\nimport './navbar.css'\nimport {  Link } from \"react-router-dom\";\nimport {useContractKit} from \"@celo-tools/use-contractkit\";\n\n\n\n\n const Navbar = () => {\n  const [toggleMenu,setToggleMenu] = useState(false)\n\n     const {address, destroy, connect} = useContractKit();\n\n  return (\n    <div className='navbar'>\n      <div className=\"navbar-links\">\n        <div className=\"navbar-links_logo\">\n         \n          <Link to=\"/\">\n            <h1>SchwiftyRick Market</h1>\n          </Link>\n        </div>\n        <div className=\"navbar-links_container\">\n        \n        <Link to=\"/\">\n            <h1>ON SALE !</h1>\n          </Link>\n         <Link  className='stuff'  to=\"/profile\">  <p>MY NFTs</p></Link>\n         <Link to=\"/create\">\n             <p>CREATION LABZ</p>\n            </Link>\n        </div>\n      </div>\n      <div className=\"navbar-sign\">\n      {!address ? (\n        <>\n\n        <button type='button' className='secondary-btn' onClick={connect}>CONNECT</button>\n        </>\n      ): (\n        <>\n\n          <button type='button' onClick={destroy} className='secondary-btn'>LOGOUT</button>\n\n\n            \n        </>\n      )}\n\n\n\n      </div>\n     \n    </div>\n  )\n}\n\nexport default Navbar\n","import { useContract } from \"./useContract\";\nimport MyNftMarketAbi from \"../abi/NFTMarketplace.json\";\nimport MyNFTContractAddress from \"../abi/NFTMarketplace-address.json\";\n\nexport const useMarketContract = () =>{\n return useContract( MyNftMarketAbi.abi, MyNFTContractAddress.NFTMarketplace);\n\n}\n","import { useState, useEffect, useCallback } from 'react';\nimport { useContractKit } from '@celo-tools/use-contractkit';\n\nexport const useContract = (abi, contractAddress) => {\n  const { getConnectedKit, address } = useContractKit();\n  const [contract, setContract] = useState(null);\n\n  const getContract = useCallback(async () => {\n    const kit = await getConnectedKit();\n\n    // get a contract interface to interact with\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\n  }, [getConnectedKit, abi, contractAddress]);\n\n  useEffect(() => {\n    if (address) getContract();\n  }, [address, getContract]);\n\n  return contract;\n};\n","import React, {useEffect, useState} from 'react'\nimport './nfts.css'\nimport {Link} from 'react-router-dom';\nimport {HashLoader, SyncLoader} from \"react-spinners\";\nimport {ethers} from \"ethers\";\nimport {useMarketContract} from \"../../hooks/useMarketContract\";\nimport {useContractKit} from \"@celo-tools/use-contractkit\";\n\nconst Nfts = ({title, nfts, loading, relist}) => {\n    console.log({nfts})\n\n    return (\n        <div className='bids section__padding'>\n            <div className=\"bids-container\">\n                <div className=\"bids-container-text\">\n                    {!loading && <h1>{nfts.length < 1 ? \"No NFTs here, mate :)\" : title}</h1>}\n\n                </div>\n                <div className=\"bids-container-card\">\n\n                    {loading && <><HashLoader color={\"red\"} size={200} /><p className='pih'>CONNECT WALLET ! </p></> }\n                    \n\n                    {nfts.map((nft) => (<Link to={ !relist ? `/nft/${nft.tokenId}` : `/nft/${nft.tokenId}/relist`}>\n                            <div className=\"card-column cursor-pointer\">\n                                <div className=\"bids-card\">\n                                    <div className=\"bids-card-top\">\n                                        <div className=\"bids-card-topz\" >\n                                           <img src={nft.image} alt=\"\"/>\n                                        </div>\n                                        <p className=\"bids-title\">{nft.name}</p>\n\n                                    </div>\n                                    <div className=\"bids-card-bottom\">\n                                        <p>{nft.price} <span>cUsd</span></p>\n\n\n                                         </div>\n\n\n                                </div>\n\n\n                           <div>\n\n\n                           </div>\n                            </div>\n                        </Link>\n                    ))}\n\n\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Nfts\n","import React, {useEffect, useState} from 'react';\nimport {Nfts } from '../../components'\nimport {useContractKit} from \"@celo-tools/use-contractkit\";\nimport {useMarketContract} from \"../../hooks/useMarketContract\";\nimport axios from \"axios\";\nimport {ethers} from \"ethers\";\n\nconst Home = () => {\n\n    const {address, connect, performActions} = useContractKit()\n    const marketplace = useMarketContract()\n\n\n    const [nfts, setNfts] = useState([])\n    const [loading, setLoading] = useState(true)\n\n    useEffect(() => {\n        if(marketplace) loadNFTs()\n    }, [marketplace])\n    const loadNFTs = async ()  =>{\n        try {\n            const data = await marketplace.methods.fetchMarketItems().call()\n            const items = await Promise.all(data.map(async i => {\n                const tokenUri = await marketplace.methods.tokenURI(i.tokenId).call()\n                const meta = await axios.get(tokenUri)\n                let price = ethers.utils.formatUnits(i.price.toString(), 'ether')\n                return {\n                    price,\n                    tokenId: Number(i.tokenId),\n                    seller: i.seller,\n                    owner: i.owner,\n                    image: meta.data.image,\n                    name: meta.data.name\n                }\n            }))\n\n            setNfts(items)\n            setLoading(false)\n        }catch (e) {\n            console.log({e})\n        }finally {\n            setLoading(false)\n        }\n\n    }\n\n  return  <div className='two'>\n    \n   \n   <Nfts nfts={nfts} title=\"SCHWIFTY COLLECTIBLES - ON SALE\" loading={loading}  />\n  </div>;\n};\n\nexport default Home;","import React, {useEffect, useState} from 'react';\nimport './profile.css'\nimport Nfts from '../../components/nfts/Nfts'\nimport {useContractKit} from \"@celo-tools/use-contractkit\";\nimport {useMarketContract} from \"../../hooks/useMarketContract\";\nimport axios from \"axios\";\nimport {ethers} from \"ethers\";\n\nconst Profile = () => {\n\n    const {address, connect, performActions} = useContractKit()\n    const marketplace = useMarketContract()\n\n\n    const [nfts, setNfts] = useState([]);\n    const [soldNfts, setSoldNfts] = useState([]);\n    const [loading, setLoading] = useState(false);\n\n    useEffect(() => {\n        if (marketplace) {\n            loadNFTs()\n        }\n    }, [ marketplace]);\n\n    const loadNFTs = async () => {\n        setLoading(true)\n        try {\n            const data = await marketplace.methods.fetchMyNFTs().call()\n            console.log({data})\n            const items = await Promise.all(data.map(async i => {\n                const tokenURI = await marketplace.methods.tokenURI(i.tokenId).call()\n\n                const owner = await marketplace.methods.getNftOwner(i.tokenId).call()\n                const meta = await axios.get(tokenURI)\n                let price = ethers.utils.formatUnits(i.price.toString(), 'ether')\n\n                return {\n                    price,\n                    tokenId: Number(i.tokenId),\n                    seller: i.seller,\n                    name: meta.data.name,\n                    owner,\n                    image: meta.data.image,\n                    tokenURI\n                }\n            }))\n\n            setNfts(items)\n        } catch (e) {\n            console.log({e})\n        } finally {\n            setLoading(false)\n        }\n\n\n    }\n\n\n    return (\n        <div className='profile section__padding'>\n            <div className=\"profile-top\">\n               \n            </div>\n            <div className=\"profile-bottom\">\n     \n                <Nfts nfts={nfts} loading={loading} title=\"Your NFTs\" relist={true}/>\n            </div>\n        </div>\n    );\n};\n\nexport default Profile;\n","import React, {useEffect, useState} from 'react';\nimport './item.css'\nimport axios from \"axios\";\nimport {ethers} from \"ethers\";\nimport {useParams} from \"react-router\";\nimport {useContractKit} from \"@celo-tools/use-contractkit\";\nimport {useMarketContract} from \"../../hooks/useMarketContract\";\nimport {useNavigate} from \"react-router-dom\";\n\nconst Item = () => {\n\n    const {id} = useParams()\n    const marketplace = useMarketContract()\n    const [nftData, setNftData] = useState({});\n    const {address, performActions} = useContractKit()\n\n    const navigate = useNavigate()\n    useEffect(() => {\n        if (marketplace ) fetchNft()\n    }, [marketplace]);\n\n    const fetchNft = async () => {\n        const tokenUri = await marketplace.methods.tokenURI(id).call()\n        const meta = await axios.get(tokenUri)\n        setNftData(meta.data)\n    }\n\n    const purchaseNft = async () => {\n\n        try {\n\n\n        await performActions(async (kit) => {\n            const { defaultAccount } = kit;\n            /* user will be prompted to pay the asking proces to complete the transaction */\n            const price =( ethers.utils.parseUnits(nftData.price, 'ether')).toString()\n            console.log({price})\n            const transaction = await marketplace.methods.createMarketSale(id).send({\n                from: defaultAccount,\n                value: price\n            })\n            alert(`You have successfully purchased this NFT!`)\n            navigate(`/profile`)\n        })\n        } catch (error) {\n            console.log({ error });\n        }\n\n\n    }\n\n    return (\n        <div className='item section__padding'>\n            <div className=\"item-image\">\n                <img src={nftData.image} alt=\"item\"/>\n            </div>\n            <div className=\"item-content\">\n                <div className=\"item-content-title\">\n                    <h1>NAME: <br />{nftData.name}</h1><br /><br /><br />\n                    <h1>PRICE: <br /> <span>{nftData.price} CUSD</span> .</h1>\n                </div>\n                <div className=\"item-content-creator\">\n                    <h1>CREATOR ADDRESS</h1>\n                    <div>\n                       \n                        <p>{nftData.owner || \"Anonymous\"}  </p>\n                    </div>\n                </div>\n                <div className=\"item-content-detail\">\n                    \n                    <p><h1>DESCRIPTION</h1><br />{nftData.description}</p>\n                </div>\n\n                {nftData.owner == address ?\n                    <form className='writeForm' autoComplete='off' onSubmit={(e)=>e.preventDefault()}>\n\n\n\n                    </form>\n\n                    :\n                    <div >\n                        <button className=\"primary-btn\" onClick={purchaseNft}>Buy For {nftData.price} CUSD</button>\n                    \n                    </div>\n\n                }\n            </div>\n        </div>\n    )\n};\n\nexport default Item;\n","import './create.css'\nimport {useEffect, useState} from \"react\";\nimport {create as ipfsHttpClient} from 'ipfs-http-client'\nimport {useMarketContract} from \"../../hooks/useMarketContract\";\nimport {ethers} from \"ethers\";\n\nimport CircleLoader from \"react-spinners/ClipLoader\";\nimport {useContractKit} from \"@celo-tools/use-contractkit\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\nconst Create = () => {\n    const {address, connect, performActions} = useContractKit()\n    const navigate = useNavigate();\n    useEffect(() => {\n\n        if (!address) {\n\n            (async () => {\n                await connect()\n            })()\n\n        }\n\n    }, [address, connect])\n\n\n    const [loading, setLoading] = useState(false)\n    const [image, setImage] = useState('')\n    const [price, setPrice] = useState(null)\n    const [category, setCategory] = useState('Art')\n    const [name, setName] = useState('')\n    const [description, setDescription] = useState('')\n\n    const marketplace = useMarketContract()\n\n\n    const uploadToIPFS = async (event) => {\n        event.preventDefault()\n        const file = event.target.files[0]\n        if (typeof file !== 'undefined') {\n            try {\n                const result = await client.add(file)\n                console.log(result)\n                setImage(`https://ipfs.infura.io/ipfs/${result.path}`)\n            } catch (error) {\n                console.log(\"ipfs image upload error: \", error)\n            }\n        }\n    }\n\n    const isFormFiled = () => {\n        if (image === '' || price === null || category === '' || name === '' || description === '') {\n            return false\n        } else {\n            return true\n        }\n    }\n    const createNFT = async (e) => {\n        e.preventDefault()\n        try {\n            await performActions(async (kit) => {\n                const {defaultAccount} = kit;\n\n                if (!image || !price || !name || !description || !category) return\n\n                setLoading(true)\n                const result = await client.add(JSON.stringify({image, price, name, description, category, owner : address}))\n                await mintThenList(result, defaultAccount)\n\n            })\n\n        } catch (error) {\n            console.log(\"ipfs uri upload error: \", error)\n        } finally {\n            setLoading(false)\n        }\n    }\n    const mintThenList = async (result, defaultAccount) => {\n        const uri = `https://ipfs.infura.io/ipfs/${result.path}`\n\n\n        const listingPrice = ethers.utils.parseEther(price.toString())\n\n\n        // mint nft\n       const tx =  await marketplace.methods.createToken(uri,listingPrice ).send({\n            from:defaultAccount\n        })\n\n\n        alert(\"Your nft is now ON THE BLOCK!\")\n        navigate(`/`);\n\n    }\n\n    return (\n        <div className='create two section__padding'>\n            <div className=\"create-container\">\n                <h1>Creations Wizard</h1>\n                <p>Here you get to upload your own Schwifty NFT. Fill in the detils below and click on the LFG button at the bottom of it all to upload your svhwifty work of art to the blockchain! </p>\n              \n              \n                <form className='writeForm' autoComplete='off'>\n\n                    <div className=\"formGroup\">\n                        <label>CHOOSE YOUR ART</label>\n                        <input onChange={uploadToIPFS} type=\"file\" className='custom-file-input'\n                        />\n                    </div>\n                    <div className=\"formGroup\">\n                        <label>CHOOSE CATEGORY</label>\n                        <select onChange={(e) => {\n                            console.log(e.target.value)\n                            setCategory(e.target.value)\n                        }}>\n                            <option>Collectibles</option>\n                            <option>Art</option>\n                            <option>Trading Card</option>\n\n                        </select>\n                    </div>\n                    <div className=\"formGroup\">\n                        <label>NAME</label>\n                        <input onChange={(e) => setName(e.target.value)} type=\"text\" placeholder='Item Name'\n                               autoFocus={true}/>\n                    </div>\n                    <div className=\"formGroup\">\n                        <label>SOME BRIEF INFO</label>\n                        <textarea onChange={(e) => setDescription(e.target.value)} type=\"text\" rows={4}\n                                  placeholder='Brief Info of your creation'\n                        ></textarea>\n                    </div>\n                    <div className=\"formGroup\">\n                        <label>SET PRICE</label>\n                        <div className=\"twoForm\">\n                            <input onChange={(e) => setPrice(e.target.value)} type=\"text\" placeholder='Price'/>\n                            <select>\n                                <option value=\"CELO\">CELO</option>\n                            </select>\n                        </div>\n                    </div>\n                   \n                    {loading ?\n                        <div className={\"tw-text-center\"}>\n                            <CircleLoader color={\"white\"}/>\n                        </div>\n\n                        :\n                        <button disabled={!isFormFiled()} className='secondary-btn' onClick={createNFT}>LFG!</button>\n                    }\n\n\n                </form>\n            </div>\n        </div>\n\n    )\n};\n\nexport default Create;\n","import React, {useEffect, useState} from 'react';\nimport './itemRelist.css'\nimport axios from \"axios\";\nimport {ethers} from \"ethers\";\nimport {useParams} from \"react-router\";\nimport {useContractKit} from \"@celo-tools/use-contractkit\";\nimport {useMarketContract} from \"../../hooks/useMarketContract\";\nimport {useNavigate} from \"react-router-dom\";\n\nconst ItemRelist = () => {\n\n    const {id} = useParams()\n    const marketplace = useMarketContract()\n    const [nftData, setNftData] = useState({});\n    const {address, performActions} = useContractKit()\n\n    const navigate = useNavigate()\n    useEffect(() => {\n        if (marketplace) fetchNft()\n    }, [marketplace]);\n\n\n    // const [newPrice, setNewPrice] = useState(0);\n    const listNFTForSale = async () => {\n\n        await performActions(async (kit) => {\n            if (!nftData.price) {\n                return alert(\"Enter a valid price\")\n            }\n            const priceFormatted = (ethers.utils.parseUnits(nftData.price, 'ether')).toString()\n            let transaction = await marketplace.methods.resellToken(id, priceFormatted).send({\n                from: address\n            })\n            alert(\"NFT listed for sale!\")\n\n            navigate(\"/\")\n        })\n\n\n\n    }\n\n    const fetchNft = async () => {\n        const tokenUri = await marketplace.methods.tokenURI(id).call()\n        let meta = await axios.get(tokenUri)\n        meta.data.owner =  await marketplace.methods.getNftOwner(id).call()\n        setNftData(meta.data)\n    }\n\n    const purchaseNft = async () => {\n\n        try {\n\n\n            await performActions(async (kit) => {\n                const {defaultAccount} = kit;\n                /* user will be prompted to pay the asking proces to complete the transaction */\n                const price = (ethers.utils.parseUnits(nftData.price, 'ether')).toString()\n                const transaction = await marketplace.methods.createMarketSale(id).send({\n                    from: defaultAccount,\n                    value: price\n                })\n                alert(`You have successfully purchased this NFT!`)\n                navigate(`/profile`)\n            })\n        } catch (error) {\n            console.log({error});\n        }\n\n\n    }\n\n\n    return (\n        <div className='item section__padding'>\n            <div className=\"item-image\">\n                <img src={nftData.image} alt=\"item\"/>\n            </div>\n            <div className=\"item-content\">\n                <div className=\"item-content-title\">\n                    <h1>NAME: <br />{nftData.name}</h1><br /><br /><br />\n                    <h1>PRICE: <br /> <span>{nftData.price} CUSD</span> .</h1>\n                </div>\n                <div className=\"item-content-creator\">\n                    <h1>CREATOR ADDRESS</h1>\n                    <div>\n                       \n                        <p>{nftData.owner || \"Anonymous\"}  </p>\n                    </div>\n                </div>\n                <div className=\"item-content-detail\">\n                    \n                    <p><h1>DESCRIPTION</h1><br />{nftData.description}</p>\n                </div>\n\n                {nftData.owner == address ?\n                    <form className='writeForm' autoComplete='off' onSubmit={(e)=>e.preventDefault()}>\n\n                        <div className=\"formGroup\">\n\n                            <button className=\"primary-btn\"\n                                    onClick={listNFTForSale}>Relist NFT\n                            </button>\n\n                        </div>\n\n\n                    </form>\n\n                    :\n                    <div >\n                        <button className=\"primary-btn\" onClick={purchaseNft}>Buy For {nftData.price} CUSD</button>\n                    \n                    </div>\n\n                }\n            </div>\n        </div>\n    )\n};\n\nexport default ItemRelist;\n","import './App.css';\nimport {Navbar} from './components'\nimport {Home,Profile,Item, Create} from './pages'\nimport {BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport ItemRelist from \"./pages/itemRelist/itemRelist\";\n\nfunction App() {\n\n  return (\n    <div>\n\n        <Router>\n\n\n      <Navbar />\n          <Routes>\n            <Route path=\"/\" element={<Home />} />\n            <Route path=\"nft/:id\" element={<Item />} />\n            <Route path=\"nft/:id/relist\" element={<ItemRelist />} />\n            <Route path=\"/create\" element={<Create /> } />\n            <Route path=\"/profile\" element={<Profile />} />\n          </Routes>\n     \n\n        </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n    ContractKitProvider,\n    Alfajores,\n    NetworkNames,\n} from '@celo-tools/use-contractkit';\nimport App from './App';\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\nimport './index.css';\n// import \"react-toastify/dist/ReactToastify.min.css\";\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <ContractKitProvider\n            networks={[Alfajores]}\n            network={{\n                name: NetworkNames.Alfajores,\n                rpcUrl: 'https://alfajores-forno.celo-testnet.org',\n                graphQl: 'https://alfajores-blockscout.celo-testnet.org/graphiql',\n                explorer: 'https://alfajores-blockscout.celo-testnet.org',\n                chainId: 44787,\n            }}\n            dapp={{\n                name: 'SCHWIFTYRICK',\n                description: 'An NFT marketplace for them schwifty NFTs.',\n                url: 'https://dacade.org',\n            }}\n        >\n            <App />\n        </ContractKitProvider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}